name: Solar System Workflow

on:  
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: Unit Testing
        strategy:
          matrix:
            nodejs_versions: [18, 20]
            operating_system: [ubuntu-latest, macos-latest]
            exclude:
            - nodejs_versions: [18]
              operating_system: [macos-latest]
        runs-on: ${{ matrix.operating_system }}
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version ${{ matrix.nodejs_versions }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_versions }}

        - name: Cache NPM Dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          ## whenever the package-lock.json file changes, invalidate the cache and create a new cache
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          if: always()
          ## if:failure() && steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success'
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        container:
          image: node:18
        
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo
          ## No need to port mapping between the container communication
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        
        steps:
        - name: Checkout Repositoty
          uses: actions/checkout@v4
        
        # - name: Setup Nodejs Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     nodejs_version: 18

        - name: Cache NPM Dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          ## whenever the package-lock.json file changes, invalidate the cache and create a new cache
        
        - name: Install Dependencies
          run: npm install

        - name: Check Code Coverage
          run: npm run coverage
          continue-on-error: true

        - name: Archieve Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 6

    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      ## Grant the GITHUB_TOKEN permission to push image to ghcr
      permissions:
        packages: write
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build for Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Test
        run: |
          docker images
          docker run \
            --name solar-system-app \ 
            -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live
      
      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: | 
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongo-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/
    
    dev-integration-testing:
      name: DEV INTEGRATION TESTING
      if: contains(github.ref, 'feature/')
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.application-url }}
          run: |
            echo $URL
            echo "------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongo-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: production
        k8s-manifest-dir: kubernetes/production/

    prod-integration-testing:
      name: PROD INTEGRATION TESTING
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.application-url }}
          run: |
            echo $URL
            echo "------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live



